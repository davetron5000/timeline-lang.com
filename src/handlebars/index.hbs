<!DOCTYPE html>
<html lang="en">
  <head>
    {{> header-metadata }}
    {{> social-metadata }}
  </head>
  <body>
    {{> header page="index" tagline="true" }}
    <main class="mt0 bg-future-blue near-black">
      <div class="tc pt4">
        <a href="/install.html" class="dib link ba br3 pa3 ph4 f3 futura light-yellow bg-dark-gray b--light-yellow grow">
          Get Started
        </a>
      </div>
      <section class="mt4">
        <article class="ph3">
          <h1 class="tc f3-ns f4 lh-title">What problems does <span class="logomark">Timeline</span> solve?</h1>
          {{#> p-copy }}
            Since time travel is inherently dangerous, the programming language we use must focus on safety, predictability, and comprehensibility. <span class="logomark">Timeline</span> is designed to make it as easy as possible to write software whose behavior we can both accurately predict and accurately explain.  It makes many tradeoffs in order to achieve this, all based on its core values.
          {{/p-copy }}
        </article>
        <article class="bg-light-yellow dark-gray pv3">
          <div class="ph5 tc">
            <h2 class="f2 mb0">Core Values</h2>
            <p class="f3 lh-title">
              The most important thing about a program is knowing what it will do.
            </p>
            <p class="f3 lh-title">
              The second is knowing what it <em>did</em> do.
            </p>
          </div>
        </article>
        <section class="ph3">
          <h3 class="tc f2">Features</h3>
{{#> feature title="No Functions or I/O—Only Events" code="features/send-disconnect.timeline"}}
All code is executed in response to a well-defined event.  While code can have logic and computation, it's only means of interacting outside of itself is to send events.  Above we tell the Time-Space Manifold to disconnect its vortex 10ms after it's been established.
{{/feature}}
{{#> feature title="Static Typing, Including Literals" code="features/typed-literals.timeline"}}
The runtime knows—and will enforce—the types of everything.  The literal values above are typed.  There is rarely a need for primitive/untyped vlues like raw integers.  The compiler understands that <code>37º20'12"3</code> is an <code>Angle</code> of 37 degrees, 20 hours, 12 minutes, and 3 seconds, and will construct the requisite data type.  Further, `destination` is a `Destination`, which is created by the values inside the brackets.  Lastly, large numeric values must have commas for readability.
{{/feature}}
{{#> feature title="Minimal Density Per Line" code="features/density.timeline"}}
All expressions are <code>X «oper» Y</code> and cannot be nested or compound.  They cannot be used in control structures.  This means that every expression must have a name—the variable to which it is assigned.
{{/feature}}
{{#> feature title="Names Must Be Defined…in the Dictionary" code="features/naming.timeline"}}
All variables must either be dictionary words, or be dictionary words joined with a dash.  To use an undefined word in a variable, that word must first be defined in the dictionary.  The result is that all variables are constructed of defined words.  Same goes for custom event names.
{{/feature}}
{{#> feature title="There are No Unit Tests—Plans are Simulated" code="features/simulation.simulation"}}
Writing code—and checking if it will work—is done through a Monte Carlo simulation. Based on our understanding of the universe and the objects within it, <span class="logomark">Timeline</span> will give you a risk assessment of your flight plan.  You write code only to address a known risk.  When the risk has been reduced enough that the trip is worth it…take the trip.
{{/feature}}
      </section>
    </main>
    {{> footer }}
  </body>
</html>
